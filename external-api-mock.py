#!/usr/bin/env python3
"""
–í–Ω–µ—à–Ω–∏–π API Mock –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ChatBot Platform
–ü–æ—Ä—Ç: 8181 (–∫–∞–∫ –≤ —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö)
"""

from flask import Flask, request, jsonify
import requests
import json
import time

app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ChatBot Platform
CHATBOT_API = "http://localhost:8092/api/v1"

@app.route('/api/data', methods=['GET', 'POST'])
def mock_data_api():
    """–ò–º–∏—Ç–∞—Ü–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ API —Å –¥–∞–Ω–Ω—ã–º–∏"""
    if request.method == 'GET':
        return jsonify({
            "endpoints": ["/api/data", "/api/info", "/api/users"],
            "service": "external-api",
            "stats": {
                "memory_usage": "256MB",
                "requests": 127,
                "uptime": "2 hours"
            },
            "version": "2.1.0",
            "timestamp": int(time.time())
        })
    
    # POST –∑–∞–ø—Ä–æ—Å
    data = request.get_json() or {}
    return jsonify({
        "message": "Data received successfully",
        "received_data": data,
        "processed": True,
        "id": f"req_{int(time.time())}",
        "status": "ok"
    })

@app.route('/api/info')
def mock_info_api():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π API"""
    return jsonify({
        "service_name": "Mock External API",
        "description": "–¢–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è ChatBot Platform",
        "features": ["data_processing", "user_management", "analytics"],
        "health": "healthy",
        "load": 0.3
    })

@app.route('/api/users')
def mock_users_api():
    """API –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    return jsonify({
        "users": [
            {"id": 1, "name": "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤", "role": "admin"},
            {"id": 2, "name": "–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞", "role": "user"},
            {"id": 3, "name": "–ê–ª–µ–∫—Å–µ–π –ö–æ–∑–ª–æ–≤", "role": "moderator"}
        ],
        "total": 3,
        "active": 2
    })

@app.route('/chat/start', methods=['POST'])
def start_chat():
    """–ó–∞–ø—É—Å–∫ –¥–∏–∞–ª–æ–≥–∞ —Å ChatBot Platform"""
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        session_response = requests.post(f"{CHATBOT_API}/chat/sessions")
        if session_response.status_code != 200:
            return jsonify({"error": "Failed to create chat session"}), 500
        
        session_data = session_response.json()
        session_id = session_data.get('session_id')
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è: {session_id}")
        print(f"üìù –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {session_data.get('initial_message', '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è')}")
        
        return jsonify({
            "status": "chat_started",
            "session_id": session_id,
            "initial_message": session_data.get('initial_message'),
            "instructions": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ POST /chat/message –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"
        })
        
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/chat/message', methods=['POST'])
def send_message():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–∏–∞–ª–æ–≥"""
    data = request.get_json()
    session_id = data.get('session_id')
    message = data.get('message')
    
    if not session_id or not message:
        return jsonify({"error": "session_id –∏ message –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"}), 400
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = requests.post(f"{CHATBOT_API}/chat/messages", json={
            "session_id": session_id,
            "content": message
        })
        
        if response.status_code != 200:
            return jsonify({"error": "Failed to send message"}), 500
        
        bot_response = response.json()
        
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message}")
        print(f"ü§ñ –ë–æ—Ç: {bot_response.get('bot_response', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞')}")
        
        return jsonify({
            "status": "message_sent",
            "user_message": message,
            "bot_response": bot_response.get('bot_response'),
            "session_active": bot_response.get('session_active', True)
        })
        
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/chat/demo', methods=['POST'])
def demo_conversation():
    """–î–µ–º–æ –¥–∏–∞–ª–æ–≥ - –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª"""
    try:
        # 1. –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        session_response = requests.post(f"{CHATBOT_API}/chat/sessions")
        session_data = session_response.json()
        session_id = session_data.get('session_id')
        
        print(f"\nüöÄ –î–ï–ú–û –î–ò–ê–õ–û–ì –ù–ê–ß–ê–¢")
        print(f"üìã –°–µ—Å—Å–∏—è: {session_id}")
        print(f"ü§ñ –ë–æ—Ç: {session_data.get('initial_message', '–ü—Ä–∏–≤–µ—Ç!')}")
        
        # –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π —É–∑–µ–ª - announce, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        if session_data.get('node_type') == 'announce':
            continue_response = requests.post(f"{CHATBOT_API}/chat/continue", json={
                "session_id": session_id
            })
            if continue_response.status_code == 200:
                continue_data = continue_response.json()
                print(f"ü§ñ –ë–æ—Ç (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ): {continue_data.get('bot_response', '')}")
        
        # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        messages = [
            "—Ç–µ—Å—Ç",
            "-",
            "-",
            "-",
            "-"
        ]
        
        responses = []
        for msg in messages:
            time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            
            response = requests.post(f"{CHATBOT_API}/chat/messages", json={
                "session_id": session_id,
                "content": msg
            })
            
            if response.status_code == 200:
                bot_response = response.json()
                print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {msg}")
                print(f"ü§ñ –ë–æ—Ç: {bot_response.get('bot_response', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞')}")
                
                responses.append({
                    "user": msg,
                    "bot": bot_response.get('bot_response'),
                    "timestamp": int(time.time())
                })
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {msg} - –°—Ç–∞—Ç—É—Å: {response.status_code}")
                try:
                    error_data = response.json()
                    print(f"‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {error_data}")
                except:
                    print(f"‚ùå –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {response.text}")
        
        print(f"‚úÖ –î–ï–ú–û –ó–ê–í–ï–†–®–ï–ù\n")
        
        return jsonify({
            "status": "demo_completed",
            "session_id": session_id,
            "conversation": responses,
            "total_messages": len(responses)
        })
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ: {e}")
        return jsonify({"error": str(e)}), 500

@app.route('/health')
def health():
    """Health check"""
    return jsonify({
        "status": "UP",
        "service": "external-api-mock",
        "chatbot_available": check_chatbot_health()
    })

def check_chatbot_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ ChatBot Platform"""
    try:
        response = requests.get(f"{CHATBOT_API}/health", timeout=2)
        return response.status_code == 200
    except:
        return False

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ External API Mock")
    print("üì° –ü–æ—Ä—Ç: 8181")
    print("üîó Endpoints:")
    print("   GET  /api/data     - –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
    print("   POST /api/data     - –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    print("   GET  /api/info     - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ")
    print("   GET  /api/users    - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("   POST /chat/start   - –ó–∞–ø—É—Å–∫ –¥–∏–∞–ª–æ–≥–∞")
    print("   POST /chat/message - –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è")
    print("   POST /chat/demo    - –ü–æ–ª–Ω—ã–π –¥–µ–º–æ –¥–∏–∞–ª–æ–≥")
    print("   GET  /health       - –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞")
    print()
    
    app.run(host='0.0.0.0', port=8282, debug=True)
