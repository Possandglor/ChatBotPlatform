package com.pb.chatbot.scenario.service;

import com.pb.chatbot.scenario.model.ScenarioInfo;
import com.pb.chatbot.scenario.model.WorkspaceBranch;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import org.jboss.logging.Logger;

import java.time.LocalDateTime;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;

@ApplicationScoped
public class ScenarioManagementService {
    
    private static final Logger LOG = Logger.getLogger(ScenarioManagementService.class);
    private final Map<String, ScenarioInfo> scenarios = new ConcurrentHashMap<>();
    
    @Inject
    BranchService branchService;
    
    @Inject
    WorkspaceBranchService workspaceBranchService;
    
    public ScenarioManagementService() {
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        createTestScenarios();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º main –≤–µ—Ç–∫–∏ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        initializeMainBranches();
    }
    
    private void initializeMainBranches() {
        // –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ PostConstruct
        // –ü–æ–∫–∞ —á—Ç–æ –æ—Å—Ç–∞–≤–∏–º –ø—É—Å—Ç—ã–º, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏
    }
    
    public List<ScenarioInfo> getAllScenarios() {
        return new ArrayList<>(scenarios.values());
    }
    
    public ScenarioInfo getScenario(String id) {
        ScenarioInfo scenario = scenarios.get(id);
        
        // –õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è main –≤–µ—Ç–∫–∏
        if (scenario != null && branchService != null) {
            branchService.initializeMainBranch(id, scenario.scenarioData);
        }
        
        return scenario;
    }
    
    public ScenarioInfo createScenario(ScenarioInfo scenario) {
        if (scenario.id == null) {
            scenario.id = UUID.randomUUID().toString();
        }
        
        scenario.createdAt = LocalDateTime.now();
        scenario.updatedAt = LocalDateTime.now();
        
        scenarios.put(scenario.id, scenario);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º main –≤–µ—Ç–∫—É –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
        if (branchService != null && scenario.scenarioData != null) {
            branchService.initializeMainBranch(scenario.id, scenario.scenarioData);
        }
        
        LOG.infof("Created scenario: %s", scenario.id);
        return scenario;
    }
    
    public ScenarioInfo updateScenario(String id, ScenarioInfo updatedScenario) {
        ScenarioInfo existing = scenarios.get(id);
        if (existing == null) {
            return null;
        }
        
        updatedScenario.id = id;
        updatedScenario.createdAt = existing.createdAt;
        updatedScenario.updatedAt = LocalDateTime.now();
        
        scenarios.put(id, updatedScenario);
        LOG.infof("Updated scenario: %s", updatedScenario.name);
        
        return updatedScenario;
    }
    
    public boolean deleteScenario(String id) {
        ScenarioInfo removed = scenarios.remove(id);
        if (removed != null) {
            LOG.infof("Deleted scenario: %s", removed.name);
            return true;
        }
        return false;
    }
    
    public List<ScenarioInfo> searchScenarios(String query) {
        if (query == null || query.trim().isEmpty()) {
            return getAllScenarios();
        }
        
        String lowerQuery = query.toLowerCase();
        return scenarios.values().stream()
            .filter(s -> s.name.toLowerCase().contains(lowerQuery) ||
                        (s.description != null && s.description.toLowerCase().contains(lowerQuery)) ||
                        (s.tags != null && s.tags.stream().anyMatch(tag -> tag.toLowerCase().contains(lowerQuery))))
            .toList();
    }
    
    public ScenarioInfo getEntryPointScenario() {
        return scenarios.values().stream()
            .filter(s -> Boolean.TRUE.equals(s.isEntryPoint) && Boolean.TRUE.equals(s.isActive))
            .findFirst()
            .orElse(null);
    }
    
    private void createTestScenarios() {
        // –¢–µ—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è (—Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞)
        ScenarioInfo greeting = new ScenarioInfo("greeting-001", "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
        greeting.description = "–ü—Ä–æ—Å—Ç–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —Å –∑–∞–ø—Ä–æ—Å–æ–º –∏–º–µ–Ω–∏";
        greeting.category = "greeting";
        greeting.tags = List.of("–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ", "–∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ");
        greeting.isEntryPoint = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∫ —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞
        greeting.scenarioData = Map.of(
            "start_node", "welcome",
            "nodes", List.of(
                Map.of(
                    "id", "welcome",
                    "type", "announce",
                    "parameters", Map.of("message", "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"),
                    "next_nodes", List.of("ask_name")
                ),
                Map.of(
                    "id", "ask_name", 
                    "type", "ask",
                    "parameters", Map.of("question", "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?"),
                    "next_nodes", List.of("greet_user")
                ),
                Map.of(
                    "id", "greet_user",
                    "type", "announce", 
                    "parameters", Map.of("message", "–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {last_answer}! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"),
                    "next_nodes", List.of()
                )
            )
        );
        scenarios.put(greeting.id, greeting);
        
        // –¢–µ—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –ø–æ–º–æ—â–∏
        ScenarioInfo help = new ScenarioInfo("help-001", "–ü–æ–º–æ—â—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é");
        help.description = "–°—Ü–µ–Ω–∞—Ä–∏–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ–º–æ—â–∏";
        help.category = "support";
        help.tags = List.of("–ø–æ–º–æ—â—å", "–ø–æ–¥–¥–µ—Ä–∂–∫–∞");
        help.scenarioData = Map.of(
            "start_node", "help_menu",
            "nodes", List.of(
                Map.of(
                    "id", "help_menu",
                    "type", "announce", 
                    "parameters", Map.of("message", "–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"),
                    "next_nodes", List.of()
                )
            )
        );
        scenarios.put(help.id, help);
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–µ—Ç–∫–∏
        createTestBranches();
        
        LOG.info("Created test scenarios");
    }
    
    private void createTestBranches() {
        try {
            // –°–æ–∑–¥–∞–µ–º –≤–µ—Ç–∫—É test —Å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            WorkspaceBranch testBranch = workspaceBranchService.createBranch("test", "main", "system");
            if (testBranch != null && testBranch.scenarios.containsKey("greeting-001")) {
                Map<String, Object> testScenario = new HashMap<>(testBranch.scenarios.get("greeting-001"));
                Map<String, Object> scenarioData = (Map<String, Object>) testScenario.get("scenario_data");
                List<Map<String, Object>> nodes = (List<Map<String, Object>>) scenarioData.get("nodes");
                
                // –ò–∑–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–µ—Ä–≤–æ–º —É–∑–ª–µ
                for (Map<String, Object> node : nodes) {
                    if ("welcome".equals(node.get("id"))) {
                        Map<String, Object> parameters = (Map<String, Object>) node.get("parameters");
                        parameters.put("message", "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞? —Ñ—ã–∞");
                        break;
                    }
                }
                
                testBranch.scenarios.put("greeting-001", testScenario);
                LOG.info("Updated test branch with custom message");
            }
            
            // –°–æ–∑–¥–∞–µ–º –≤–µ—Ç–∫—É feature-new —Å —ç–º–æ–¥–∑–∏
            WorkspaceBranch featureBranch = workspaceBranchService.createBranch("feature-new", "main", "system");
            if (featureBranch != null && featureBranch.scenarios.containsKey("greeting-001")) {
                Map<String, Object> featureScenario = new HashMap<>(featureBranch.scenarios.get("greeting-001"));
                Map<String, Object> scenarioData = (Map<String, Object>) featureScenario.get("scenario_data");
                List<Map<String, Object>> nodes = (List<Map<String, Object>>) scenarioData.get("nodes");
                
                // –ò–∑–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–µ—Ä–≤–æ–º —É–∑–ª–µ
                for (Map<String, Object> node : nodes) {
                    if ("welcome".equals(node.get("id"))) {
                        Map<String, Object> parameters = (Map<String, Object>) node.get("parameters");
                        parameters.put("message", "üöÄ –ü—Ä–∏–≤–µ—Ç –∏–∑ –≤–µ—Ç–∫–∏ feature-new!");
                        break;
                    }
                }
                
                featureBranch.scenarios.put("greeting-001", featureScenario);
                LOG.info("Updated feature-new branch with custom message");
            }
            
        } catch (Exception e) {
            LOG.errorf(e, "Failed to create test branches");
        }
    }
}
