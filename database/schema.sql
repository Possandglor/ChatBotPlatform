-- PostgreSQL —Å—Ö–µ–º–∞ –¥–ª—è Chatbot Platform
-- –î–∞—Ç–∞: 24.09.2025

-- –¢–∞–±–ª–∏—Ü–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
CREATE TABLE scenarios (
    id VARCHAR(255) PRIMARY KEY,
    name VARCHAR(500) NOT NULL,
    description TEXT,
    version VARCHAR(50) DEFAULT '1.0',
    language VARCHAR(10) DEFAULT 'uk',
    category VARCHAR(100),
    tags TEXT[], -- –º–∞—Å—Å–∏–≤ —Ç–µ–≥–æ–≤
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW(),
    created_by VARCHAR(255),
    scenario_data JSONB NOT NULL -- JSON —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —É–∑–ª–æ–≤
);

-- –¢–∞–±–ª–∏—Ü–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –º–µ–∂–¥—É —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏
CREATE TABLE scenario_transitions (
    id SERIAL PRIMARY KEY,
    from_scenario_id VARCHAR(255) REFERENCES scenarios(id),
    to_scenario_id VARCHAR(255) REFERENCES scenarios(id),
    condition_type VARCHAR(50), -- 'intent', 'entity', 'context'
    condition_value VARCHAR(255),
    priority INTEGER DEFAULT 0,
    created_at TIMESTAMP DEFAULT NOW()
);

-- –¢–∞–±–ª–∏—Ü–∞ –≤–µ—Ä—Å–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
CREATE TABLE scenario_versions (
    id SERIAL PRIMARY KEY,
    scenario_id VARCHAR(255) REFERENCES scenarios(id),
    version VARCHAR(50),
    scenario_data JSONB,
    created_at TIMESTAMP DEFAULT NOW(),
    created_by VARCHAR(255),
    change_description TEXT
);

-- –¢–∞–±–ª–∏—Ü–∞ —Å–µ—Å—Å–∏–π (–¥–ª—è Redis fallback)
CREATE TABLE chat_sessions (
    session_id VARCHAR(255) PRIMARY KEY,
    user_id VARCHAR(255),
    current_scenario_id VARCHAR(255),
    current_node_id VARCHAR(255),
    context_data JSONB,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW(),
    expires_at TIMESTAMP DEFAULT NOW() + INTERVAL '24 hours'
);

-- –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
CREATE INDEX idx_scenarios_category ON scenarios(category);
CREATE INDEX idx_scenarios_tags ON scenarios USING GIN(tags);
CREATE INDEX idx_scenarios_active ON scenarios(is_active);
CREATE INDEX idx_scenario_data ON scenarios USING GIN(scenario_data);
CREATE INDEX idx_transitions_from ON scenario_transitions(from_scenario_id);
CREATE INDEX idx_transitions_condition ON scenario_transitions(condition_type, condition_value);
CREATE INDEX idx_sessions_user ON chat_sessions(user_id);
CREATE INDEX idx_sessions_expires ON chat_sessions(expires_at);

-- –í—Å—Ç–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
INSERT INTO scenarios (id, name, description, category, tags, scenario_data) VALUES 
(
    'main-menu-nlu-001',
    '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å NLU',
    '–û—Å–Ω–æ–≤–Ω–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Å –∞–Ω–∞–ª–∏–∑–æ–º –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞',
    'main',
    ARRAY['nlu', '–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', '–±–∞–Ω–∫'],
    '{
        "start_node": "greeting",
        "nodes": [
            {
                "id": "greeting",
                "type": "announce",
                "parameters": {
                    "message": "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –±–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫. –©–æ —Å–∞–º–µ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å?"
                },
                "next_nodes": ["wait_for_request"]
            },
            {
                "id": "wait_for_request",
                "type": "ask",
                "parameters": {
                    "question": "–û–ø–∏—à–∏—Ç–µ, —á–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å:",
                    "inputType": "text"
                },
                "next_nodes": ["nlu_analysis"]
            },
            {
                "id": "nlu_analysis",
                "type": "nlu-request",
                "parameters": {
                    "service": "nlu-service",
                    "endpoint": "/api/v1/nlu/analyze"
                },
                "conditions": {
                    "success": "route_by_intent",
                    "error": "nlu_error"
                }
            },
            {
                "id": "route_by_intent",
                "type": "condition",
                "parameters": {
                    "condition": "context.intent"
                },
                "conditions": {
                    "check_balance": "balance_flow",
                    "block_card": "block_flow",
                    "close_account": "close_flow",
                    "unknown": "unknown_intent",
                    "default": "clarification"
                }
            },
            {
                "id": "balance_flow",
                "type": "announce",
                "parameters": {
                    "message": "üí≥ –ë–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç—ã ****1234: 15,250.50 –≥—Ä–Ω\\nüí∞ –î–æ—Å—Ç—É–ø–Ω–æ: 15,250.50 –≥—Ä–Ω"
                },
                "next_nodes": ["ask_more_help"]
            },
            {
                "id": "block_flow",
                "type": "announce",
                "parameters": {
                    "message": "üîí –ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞!\\nüì± SMS —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
                },
                "next_nodes": ["ask_more_help"]
            },
            {
                "id": "close_flow",
                "type": "announce",
                "parameters": {
                    "message": "üìã –ó–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–∞\\nüë§ –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è"
                },
                "next_nodes": ["ask_more_help"]
            },
            {
                "id": "unknown_intent",
                "type": "announce",
                "parameters": {
                    "message": "–ù–µ —Å–º–æ–≥ –ø–æ–Ω—è—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –°–æ–µ–¥–∏–Ω—è—é —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º..."
                },
                "next_nodes": ["end_session"]
            },
            {
                "id": "clarification",
                "type": "announce",
                "parameters": {
                    "message": "–£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:\\nüí≥ –ë–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç—ã\\nüîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–∞—Ä—Ç—ã\\nüìã –ó–∞–∫—Ä—ã—Ç–∏–µ —Å—á–µ—Ç–∞\\nüí∏ –ü–µ—Ä–µ–≤–æ–¥ –¥–µ–Ω–µ–≥"
                },
                "next_nodes": ["wait_for_request"]
            },
            {
                "id": "nlu_error",
                "type": "announce",
                "parameters": {
                    "message": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –°–æ–µ–¥–∏–Ω—è—é —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º..."
                },
                "next_nodes": ["end_session"]
            },
            {
                "id": "ask_more_help",
                "type": "ask",
                "parameters": {
                    "question": "–ú–æ–≥—É –ª–∏ –µ—â–µ —á–µ–º-—Ç–æ –ø–æ–º–æ—á—å?"
                },
                "next_nodes": ["parse_more_help"]
            },
            {
                "id": "parse_more_help",
                "type": "nlu-request",
                "parameters": {
                    "service": "nlu-service",
                    "endpoint": "/api/v1/nlu/analyze"
                },
                "conditions": {
                    "success": "check_more_help",
                    "error": "goodbye"
                }
            },
            {
                "id": "check_more_help",
                "type": "condition",
                "parameters": {
                    "condition": "context.intent"
                },
                "conditions": {
                    "check_balance": "balance_flow",
                    "block_card": "block_flow",
                    "close_account": "close_flow",
                    "default": "goodbye"
                }
            },
            {
                "id": "goodbye",
                "type": "announce",
                "parameters": {
                    "message": "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã"
                },
                "next_nodes": ["end_session"]
            },
            {
                "id": "end_session",
                "type": "announce",
                "parameters": {
                    "message": "–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞."
                },
                "next_nodes": []
            }
        ]
    }'::jsonb
);

-- –ü–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏
INSERT INTO scenario_transitions (from_scenario_id, to_scenario_id, condition_type, condition_value, priority) VALUES
('main-menu-nlu-001', 'balance-check-001', 'intent', 'check_balance', 1),
('main-menu-nlu-001', 'card-blocking-001', 'intent', 'block_card', 1),
('main-menu-nlu-001', 'account-closure-001', 'intent', 'close_account', 1),
('main-menu-nlu-001', 'operator-transfer-001', 'intent', 'unknown', 0);

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- –¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è updated_at
CREATE TRIGGER update_scenarios_updated_at BEFORE UPDATE ON scenarios
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_sessions_updated_at BEFORE UPDATE ON chat_sessions
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
